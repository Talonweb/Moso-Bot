/**
 * @param {object} x
 * @param {object} settings 
 * @param {number} x.currentPositon
 * @param {number} x.endPositon
 * @param {string} x.barStyle
 * @param {string} x.currentStyle
 * @param {boolean} settings.richBar
 * @param {string}  settings.pattern
 */

exports.porgressBar = function (x, settings) {
var start = x.currentPositon,
end = x.endPositon,
width = x.width,
precent = Math.floor(start * width / end),
precent100 = Math.floor(start * 100 / end),
bodyStyle = x.barStyle,
currentStyle = x.currentStyle;

if (!bodyStyle) bodyStyle = "â–¬";
if (!currentStyle) currentStyle = "ðŸ”˜";
if (!width) width = 20;
if (!start || isNaN(start)) return console.error(new Error("currentPositon must be included"));
if (!start || isNaN(start)) return console.error(new Error("currentPositon must be a Timestamp"));
if (!end) return console.error(new Error("endPositon must be included"));
if (isNaN(end)) return console.error(new Error("endPositon must be a Timestamp"));
if (width > 2000004) return console.error(new Error("Width must between 1 - 2000004"));
if (end < start) return console.error(new Error("endPositon must greater than currentPositon"));


if (settings) {
    if (settings.richBar) var showprecent = true;
    if (settings.format) var format = settings.format;
    if (settings.pattern) var pattern = settings.pattern;
    if (settings.endOnCurrent) var endOnCurrent = settings.endOnCurrent;
    if (settings.noCurrent) var noCurrent = settings.noCurrent;
};

 
function make_box(x) {
     x = x -1;
     let space = Array.from({ length: x-1}).fill(" ").join("");
     let hachtag = Array.from({ length: x+1}).fill(bodyStyle).join("");
     str = ``;for(let c = 0; c <= x; c++){
     if (c == 0)  str+= hachtag+"\n";if (c == x) str+= hachtag+"\n";
     if (c !== x && c !== 0) str+= `${bodyStyle}`+space +`${bodyStyle}\n`;}
     if (x == 0) str =`${bodyStyle}`
     return str
};
function draw(str) {
    for (let cent = 1; cent <= width; cent++) {
        if (cent == precent && endOnCurrent == true) return str += currentStyle;
        if (cent == precent) str += currentStyle;
        if (cent !== precent) str += bodyStyle;
    };
    return str
};
function nocurrentbar() {
    return Array.from({length:precent}).fill(bodyStyle).join("")
};

function send(str) {
if (!Object.keys(settings).length) return str;
if (showprecent) return `%${precent100} : ${str}`;
if (format) return newstr = format
.replace("<%>", "%")
.replace("<precent>", precent100)
.replace("<bar>", str)
.replace("<box>", make_box(precent))
.replace("<nocurrentbar>", nocurrentbar());

if (pattern == "box") return make_box(precent);
if (noCurrent) return nocurrentbar();
};

 return send(draw(r = ""));
};